[project]
name = 'inject'
dynamic = ['version']
description = 'Python dependency injection framework.'
license = 'Apache-2.0'
readme = 'README.md'
authors = [{ name = 'Ivan Korobkov', email = 'ivan.korobkov@gmail.com' }]
maintainers = [{ name = 'Ivan Korobkov', email = 'ivan.korobkov@gmail.com' }]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Software Development :: Libraries :: Python Modules',
]

requires-python = '>=3.9'
dependencies = []

[project.urls]
homepage = 'https://github.com/ivankorobkov/python-inject'
source = 'https://github.com/ivankorobkov/python-inject'
#documentation = 'https://inject.readthedocs.io/en/latest/'
issues = 'https://github.com/ivankorobkov/python-inject/issues'

[dependency-groups]
tests = [
  'pytest',
  'pytest-cov',
]

dev = [
  'ipython',
  { include-group = 'tests' },
]

docs = [
  # base
  'sphinx',
  'sphinx-autobuild',
  # theme
  'sphinx_rtd_theme',
  # extensions
  'sphinx-copybutton',
#  'sphinx-design',
  'sphinx-favicon',
#  'sphinx-togglebutton',
]

[build-system]
requires = ['hatchling', 'hatch-vcs']
build-backend = 'hatchling.build'

[tool.black]
line-length = 120
skip-string-normalization = true
target_version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.github
  | \.hg
  | \.idea
  | \.mypy_cache
  | \.tox
  | \.pyre_configuration
  | \.venv
  | _build
  | build
  | dist
  | var
)
'''

[tool.hatch.build.hooks.vcs]
version-file = 'src/inject/_version.py'

[tool.hatch.build.targets.wheel]
packages = ['src/inject']

[tool.hatch.build.targets.wheel.shared-data]

[tool.hatch.version]
source = 'vcs'

[tool.isort]
case_sensitive = true
include_trailing_comma = true
line_length = 120
multi_line_output = 3
profile = 'black'

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
python_version = '3.11'
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
#strict = true  # TODO(pyctrl): improve typings and enable strict mode
exclude = ['test', '.venv']

[tool.pyright]
defineConstant = { DEBUG = true }
exclude = []
executionEnvironments = []
ignore = []
include = ['src/inject', 'test']
pythonPlatform = 'Linux'
pythonVersion = '3.11'
reportMissingImports = true
reportMissingTypeStubs = false

[tool.ruff]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    'B027',
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    'FBT003',
    # Ignore checks for possible passwords
    'S105',
    'S106',
    'S107',
    # Ignore complexity
    'C901',
    'PLR0911',
    'PLR0912',
    'PLR0913',
    'PLR0915',
    'PLC1901', # empty string comparisons
    'PLW2901', # `for` loop variable overwritten
    'SIM114',  # Combine `if` branches using logical `or` operator
]
line-length = 120
select = [
    'A',
    'B',
    'C',
    'DTZ',
    'E',
    'EM',
    'F',
    'FBT',
    'I',
    'ICN',
    'ISC',
    'N',
    'PLC',
    'PLE',
    'PLR',
    'PLW',
    'Q',
    'RUF',
    'S',
    'SIM',
    'T',
    'TID',
    'UP',
    'W',
    'YTT',
]
target-version = ['py39', 'py310', 'py311']
unfixable = [
    # Don't touch unused imports
    'F401',
]

[tool.ruff.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = 'all'

[tool.ruff.isort]
known-first-party = ['inject']

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
'/**/test_*.py' = ['PLR2004', 'S101', 'TID252']


####  Pytest & Coverage  ####
[tool.pytest.ini_options]
minversion = '8.4'
addopts = '-vvv -ra --strict-markers --strict-config'
testpaths = ['test']
#filterwarnings = ['error']  # TODO(pyctrl): handle all warnings later

# Coverage configuration
[tool.coverage.run]
branch = true
[tool.coverage.report]
include_namespace_packages = true
# Regexes for lines to exclude from consideration
omit = ['*/.venv/*', '*/.tox/*', '*/.uv-cache/*']
exclude_also = [
  # Don't complain if tests don't hit defensive assertion code:
  'raise NotImplementedError',

  # Don't complain if non-runnable code isn't run:
  'if __name__ == .__main__.:',

  # Don't complain about abstract methods, they aren't run:
  '@(abc\\.)?abstractmethod',

  'if TYPE_CHECKING:',
]


# Tox config
[tool.tox]
requires = ['tox>=4.23', 'tox-uv>=1.13']
runner = 'uv-venv-lock-runner'
skip_missing_interpreters = true

env_list = [
  'py39',
  'py310',
  'py311',
  'py312',
  'py313',
#  'lint-mypy',  # TODO(pyctrl): make it green & uncomment
  'coverage',
]

# default env
[tool.tox.env_run_base]
description = 'Run unit tests with coverage report ({env_name})'
use_develop = true
dependency_groups = ['tests']
commands = [['pytest', { replace = 'posargs', extend = true }]]

# tox envs
[tool.tox.env.lint-mypy]
description = 'Type checking'
deps = ['mypy']
commands = [['mypy', { replace = 'posargs', default = ['{tox_root}'], extend = true }]]

[tool.tox.env.coverage]
description = 'run coverage'
use_develop = true
dependency_groups = ['tests']
commands = [
  [
    'pytest',
    '--cov=.',
    '--cov-branch',
    '--cov-report=term-missing:skip-covered',
    { replace = 'posargs', default = ['--cov-report=xml:coverage.xml'], extend = true },
  ],
]

[tool.tox.env.docs]
dependency_groups = ['docs']
commands = [
  [
    'sphinx-build',
    '-M',
    'html',
    '{tox_root}/docs/source',
    '{tox_root}/docs/build',
    '--fail-on-warning',
  ],
]

[tool.tox.env.docs-serve]
dependency_groups = ['docs']
commands = [
  [
    'sphinx-autobuild',
    '-M',
    'html',
    '{tox_root}/docs/source',
    '{tox_root}/docs/build',
    '--fail-on-warning',
  ],
]
